/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package de.scanq.client-api

import de.scanq.models.QRCodeBaseData
import de.scanq.models.QRCodeCreateData
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.Valid
import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface CodeApi {

    fun getDelegate(): CodeApiDelegate = object: CodeApiDelegate {}

    @Operation(
        summary = "Creates a new QR Code and returns Base Data",
        operationId = "createQRCode",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "Successfuly created QR Code", content = [Content(schema = Schema(implementation = QRCodeBaseData::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/code/qr/create"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun createQRCode(@Parameter(description = "QR Code Data", required = true) @Valid @RequestBody qrCodeCreateData: QRCodeCreateData): ResponseEntity<QRCodeBaseData> {
        return getDelegate().createQRCode(qrCodeCreateData)
    }

    @Operation(
        summary = "Deactivate QR Code Code",
        operationId = "deactivateQRCode",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "Successfully deactivate QR Code")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/code/qr/deactivate/{serialNumber}"]
    )
    fun deactivateQRCode(@Parameter(description = "", required = true) @PathVariable("serialNumber") serialNumber: java.util.UUID): ResponseEntity<Unit> {
        return getDelegate().deactivateQRCode(serialNumber)
    }

    @Operation(
        summary = "Edit QR Code and returns Base Data",
        operationId = "editQRCode",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "Successfully edited QR Code", content = [Content(schema = Schema(implementation = QRCodeBaseData::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/code/qr/edit/{serialNumber}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun editQRCode(@Parameter(description = "", required = true) @PathVariable("serialNumber") serialNumber: java.util.UUID,@Parameter(description = "", required = true) @Valid @RequestBody qrCodeCreateData: QRCodeCreateData): ResponseEntity<QRCodeBaseData> {
        return getDelegate().editQRCode(serialNumber, qrCodeCreateData)
    }

    @Operation(
        summary = "Gets Qr Code image and base Data",
        operationId = "getQRCode",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "Successfuly found QR code", content = [Content(schema = Schema(implementation = QRCodeBaseData::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/code/qr/{serialNumber}"],
            produces = ["application/json"]
    )
    fun getQRCode(@Parameter(description = "", required = true) @PathVariable("serialNumber") serialNumber: java.util.UUID): ResponseEntity<QRCodeBaseData> {
        return getDelegate().getQRCode(serialNumber)
    }
}
